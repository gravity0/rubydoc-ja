---
- :path: /doc/spec=2fcontrol.html?if
  :key: if
  :sub: 制御構造(条件分岐)
  :desc: "条件式を評価した結果が真である時、then 以下の式を評価します。"
- :path: /doc/spec=2fcontrol.html?unless
  :key: unless
  :sub: 制御構造(条件分岐)
  :desc: "unless は if と反対で、条件式が偽の時に then 以下の 式を評価します。"
- :path: /doc/spec=2fcontrol.html?case
  :key: case
  :sub: 制御構造(条件分岐)
  :desc: "case は一つの式に対する一致判定による分岐を行います。"
- :path: /doc/spec=2fcontrol.html?while
  :key: while
  :sub: 制御構造(繰り返し)
  :desc: "式を評価した値が真の間、本体を繰り返し実行します。"
- :path: /doc/spec=2fcontrol.html?until
  :key: until
  :sub: 制御構造(繰り返し)
  :desc: "式を評価した値が真になるまで、本体を繰り返して実行します。"
- :path: /doc/spec=2fcontrol.html?for
  :key: for
  :sub: 制御構造(繰り返し)
  :desc: "式を評価した結果のオブジェクトの各要素に対して本体を繰り返して実行します。"
- :path: /doc/spec=2fcontrol.html?break
  :key: break
  :sub: 制御構造(繰り返し)
  :desc: "break はもっとも内側のループを脱出します。"
- :path: /doc/spec=2fcontrol.html?next
  :key: next
  :sub: 制御構造(繰り返し)
  :desc: "nextはもっとも内側のループの次の繰り返しにジャンプします。 "
- :path: /doc/spec=2fcontrol.html?redo
  :key: redo
  :sub: 制御構造(繰り返し)
  :desc: "ループ条件のチェックを行なわず、現在の繰り返しをやり直します。"
- :path: /doc/spec=2fcontrol.html?retry
  :key: retry
  :sub: 制御構造(繰り返し)
  :desc: "retry は、ループ以外に後述の rescue 節でも使えます。"
- :path: /doc/spec=2fcontrol.html?raise
  :key: raise
  :sub: 制御構造(例外処理)
  :desc: "例外を発生させます。"
- :path: /doc/spec=2fcontrol.html?begin
  :key: begin
  :sub: 制御構造(例外処理)
  :desc: "本体の実行中に例外が発生した場合、rescue 節(複数指定できます)が 与えられていれば例外を捕捉できます。"
- :path: /doc/spec=2fcontrol.html?return
  :key: return
  :sub: 制御構造
  :desc: "式の値を戻り値としてメソッドの実行を終了します。"
- :path: /doc/spec=2fcontrol.html?BEGIN
  :key: BEGIN
  :sub: 制御構造
  :desc: "初期化ルーチンを登録します。"
- :path: /doc/spec=2fcontrol.html?END
  :key: END
  :sub: 制御構造
  :desc: "「後始末」ルーチンを登録します。"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: self
  :sub: 擬似変数
  :desc: "現在のメソッドの実行主体"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: "nil"
  :sub: 擬似変数
  :desc: "NilClassクラスの唯一のインスタンス"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: "true"
  :sub: 擬似変数
  :desc: "TrueClassクラスの唯一のインスタンス。真の代表値"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: "false"
  :sub: 擬似変数
  :desc: "FalseClassクラスの唯一のインスタンス。nilとfalseは偽を表します。"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: __FILE__
  :sub: 擬似変数
  :desc: "現在のソースファイル名。フルパスとは限らないため、フルパスが必要な場合は File.expand_path(__FILE__) とする必要があります。"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: __LINE__
  :sub: 擬似変数
  :desc: "現在のソースファイル中の行番号"
- :path: /doc/spec=2fvariables.html?pseudo
  :key: __ENCODING__
  :sub: 擬似変数
  :desc: "現在のソースファイルのスクリプトエンコーディング"
- :path: /doc/spec=2foperator.html?assign
  :key: "="
  :sub: 演算子式(代入)
  :desc: "代入式は変数などに値を設定するために用いられます。"
- :path: /doc/spec=2foperator.html?and
  :key: and
  :sub: 演算子式
  :desc: "まず、左辺を評価して、結果が真であった場合には右辺も評価します。"
- :path: /doc/spec=2foperator.html?and
  :key: "&&"
  :sub: 演算子式
  :desc: "まず、左辺を評価して、結果が真であった場合には右辺も評価します。"
- :path: /doc/spec=2foperator.html?or
  :key: or
  :sub: 演算子式
  :desc: "まず左辺を評価して、結果が偽であった場合には右辺も評価します。"
- :path: /doc/spec=2foperator.html?or
  :key: "||"
  :sub: 演算子式
  :desc: "まず左辺を評価して、結果が偽であった場合には右辺も評価します。"
- :path: /doc/spec=2foperator.html?not
  :key: not
  :sub: 演算子式
  :desc: "式の値が真である時偽を、偽である時真を返します。"
- :path: /doc/spec=2foperator.html?not
  :key: "!"
  :sub: 演算子式
  :desc: "式の値が真である時偽を、偽である時真を返します。"
- :path: /doc/spec=2fcall.html?super
  :key: super
  :sub: メソッド呼び出し
  :desc: "super は現在のメソッドがオーバーライドしているメソッドを呼び出します。"
- :path: /doc/spec=2fcall.html?yield
  :key: yield
  :sub: メソッド呼び出し
  :desc: "自分で定義したブロック付きメソッドでブロックを呼び出すときに使います。"
- :path: /doc/spec=2fdef.html?class
  :key: class
  :sub: クラス定義
  :desc: "クラスを定義します。"
- :path: /doc/spec=2fdef.html?module
  :key: module
  :sub: モジュール定義
  :desc: "モジュールを定義します。"
- :path: /doc/spec=2fdef.html?method
  :key: method
  :sub: メソッド定義
  :desc: "この定義のある場所にメソッドを定義します。"
- :path: /doc/spec=2fdef.html?limit
  :key: public
  :sub: 呼び出し制限
  :desc: "public に設定されたメソッドは制限なしに呼び出せます。"
- :path: /doc/spec=2fdef.html?limit
  :key: private
  :sub: 呼び出し制限
  :desc: "private に設定されたメソッドは関数形式でしか呼び出せません。"
- :path: /doc/spec=2fdef.html?limit
  :key: protected
  :sub: 呼び出し制限
  :desc: "protected に設定されたメソッドは、そのメソッドを持つオブジェクト のメソッド定義式内でなければ呼び出せません。"
- :path: /doc/spec=2fdef.html?alias
  :key: alias
  :sub: 定義に関する操作
  :desc: "メソッドあるいはグローバル変数に別名をつけます。"
- :path: /doc/spec=2fdef.html?undef
  :key: undef
  :sub: 定義に関する操作
  :desc: "メソッドの定義を取り消します。"
- :path: /doc/spec=2fdef.html?defined
  :key: defined
  :sub: 定義に関する操作
  :desc: "式が定義されていなければ、偽を返します。定義されていれば式の種別を表す文字列を返します。"
